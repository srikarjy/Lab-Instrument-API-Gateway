// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/lab_instrument.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LabInstrumentGateway_RegisterDevice_FullMethodName  = "/lab_instrument.LabInstrumentGateway/RegisterDevice"
	LabInstrumentGateway_GetDeviceStatus_FullMethodName = "/lab_instrument.LabInstrumentGateway/GetDeviceStatus"
	LabInstrumentGateway_ListDevices_FullMethodName     = "/lab_instrument.LabInstrumentGateway/ListDevices"
	LabInstrumentGateway_StreamData_FullMethodName      = "/lab_instrument.LabInstrumentGateway/StreamData"
	LabInstrumentGateway_SendCommand_FullMethodName     = "/lab_instrument.LabInstrumentGateway/SendCommand"
	LabInstrumentGateway_GetMeasurements_FullMethodName = "/lab_instrument.LabInstrumentGateway/GetMeasurements"
	LabInstrumentGateway_HealthCheck_FullMethodName     = "/lab_instrument.LabInstrumentGateway/HealthCheck"
)

// LabInstrumentGatewayClient is the client API for LabInstrumentGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main service definition for Lab Instrument Gateway
type LabInstrumentGatewayClient interface {
	// Device management
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Real-time streaming
	StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamDataRequest, StreamDataResponse], error)
	// Command execution
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error)
	// Historical data
	GetMeasurements(ctx context.Context, in *GetMeasurementsRequest, opts ...grpc.CallOption) (*GetMeasurementsResponse, error)
	// Health and monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type labInstrumentGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLabInstrumentGatewayClient(cc grpc.ClientConnInterface) LabInstrumentGatewayClient {
	return &labInstrumentGatewayClient{cc}
}

func (c *labInstrumentGatewayClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labInstrumentGatewayClient) GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceStatusResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_GetDeviceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labInstrumentGatewayClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labInstrumentGatewayClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamDataRequest, StreamDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LabInstrumentGateway_ServiceDesc.Streams[0], LabInstrumentGateway_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDataRequest, StreamDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LabInstrumentGateway_StreamDataClient = grpc.BidiStreamingClient[StreamDataRequest, StreamDataResponse]

func (c *labInstrumentGatewayClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCommandResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labInstrumentGatewayClient) GetMeasurements(ctx context.Context, in *GetMeasurementsRequest, opts ...grpc.CallOption) (*GetMeasurementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeasurementsResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_GetMeasurements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labInstrumentGatewayClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LabInstrumentGateway_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabInstrumentGatewayServer is the server API for LabInstrumentGateway service.
// All implementations must embed UnimplementedLabInstrumentGatewayServer
// for forward compatibility.
//
// Main service definition for Lab Instrument Gateway
type LabInstrumentGatewayServer interface {
	// Device management
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Real-time streaming
	StreamData(grpc.BidiStreamingServer[StreamDataRequest, StreamDataResponse]) error
	// Command execution
	SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error)
	// Historical data
	GetMeasurements(context.Context, *GetMeasurementsRequest) (*GetMeasurementsResponse, error)
	// Health and monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLabInstrumentGatewayServer()
}

// UnimplementedLabInstrumentGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLabInstrumentGatewayServer struct{}

func (UnimplementedLabInstrumentGatewayServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) StreamData(grpc.BidiStreamingServer[StreamDataRequest, StreamDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) GetMeasurements(context.Context, *GetMeasurementsRequest) (*GetMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLabInstrumentGatewayServer) mustEmbedUnimplementedLabInstrumentGatewayServer() {}
func (UnimplementedLabInstrumentGatewayServer) testEmbeddedByValue()                              {}

// UnsafeLabInstrumentGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabInstrumentGatewayServer will
// result in compilation errors.
type UnsafeLabInstrumentGatewayServer interface {
	mustEmbedUnimplementedLabInstrumentGatewayServer()
}

func RegisterLabInstrumentGatewayServer(s grpc.ServiceRegistrar, srv LabInstrumentGatewayServer) {
	// If the following call pancis, it indicates UnimplementedLabInstrumentGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LabInstrumentGateway_ServiceDesc, srv)
}

func _LabInstrumentGateway_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabInstrumentGateway_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_GetDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).GetDeviceStatus(ctx, req.(*GetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabInstrumentGateway_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabInstrumentGateway_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LabInstrumentGatewayServer).StreamData(&grpc.GenericServerStream[StreamDataRequest, StreamDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LabInstrumentGateway_StreamDataServer = grpc.BidiStreamingServer[StreamDataRequest, StreamDataResponse]

func _LabInstrumentGateway_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabInstrumentGateway_GetMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).GetMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_GetMeasurements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).GetMeasurements(ctx, req.(*GetMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabInstrumentGateway_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabInstrumentGatewayServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabInstrumentGateway_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabInstrumentGatewayServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabInstrumentGateway_ServiceDesc is the grpc.ServiceDesc for LabInstrumentGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabInstrumentGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lab_instrument.LabInstrumentGateway",
	HandlerType: (*LabInstrumentGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _LabInstrumentGateway_RegisterDevice_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _LabInstrumentGateway_GetDeviceStatus_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _LabInstrumentGateway_ListDevices_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _LabInstrumentGateway_SendCommand_Handler,
		},
		{
			MethodName: "GetMeasurements",
			Handler:    _LabInstrumentGateway_GetMeasurements_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LabInstrumentGateway_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _LabInstrumentGateway_StreamData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/lab_instrument.proto",
}
